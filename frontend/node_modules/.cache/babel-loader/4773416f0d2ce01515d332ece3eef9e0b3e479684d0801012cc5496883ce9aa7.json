{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\WebContentQnA\\\\frontend\\\\src\\\\components\\\\QuestionInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, Card, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionInput = ({\n  question,\n  setQuestion,\n  setAnswer,\n  setLoading,\n  setError,\n  urls,\n  addToHistory\n}) => {\n  _s();\n  var _availableModels$sele;\n  const [selectedModel, setSelectedModel] = useState('default');\n  const [availableModels, setAvailableModels] = useState({});\n  useEffect(() => {\n    // Fetch available models when component mounts\n    const fetchModels = async () => {\n      try {\n        // Use appropriate API URL with proper error handling\n        const response = await axios.get('http://localhost:5000/api/models');\n        console.log(\"Available models response:\", response.data);\n        if (response.data && response.data.models) {\n          setAvailableModels(response.data.models);\n          setSelectedModel(response.data.default || 'default');\n        } else {\n          throw new Error('Invalid response format from models API');\n        }\n      } catch (error) {\n        console.error('Error fetching models:', error);\n        // Fallback to default model if API call fails\n        setAvailableModels({\n          default: {\n            name: 'TF-IDF + spaCy',\n            description: 'Lightweight model using TF-IDF and spaCy',\n            available: true\n          }\n        });\n      }\n    };\n    fetchModels();\n  }, []);\n  const handleQuestionChange = e => {\n    setQuestion(e.target.value);\n  };\n  const handleModelChange = val => {\n    console.log(\"Selected model changed to:\", val);\n    setSelectedModel(val);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (question.trim() === '') {\n      setError('Please enter a question');\n      setTimeout(() => setError(''), 3000);\n      return;\n    }\n    setLoading(true);\n    setError('');\n    try {\n      console.log(\"Submitting question with model:\", selectedModel);\n      const response = await axios.post('http://localhost:5000/api/answer', {\n        question,\n        urls,\n        model_type: selectedModel\n      });\n      console.log(\"Answer response:\", response.data);\n      const answerData = {\n        question,\n        answer: response.data.answer,\n        confidence: response.data.confidence,\n        context: response.data.context,\n        model_used: response.data.model_used,\n        timestamp: new Date().toISOString()\n      };\n      setAnswer(answerData);\n\n      // Add to question history\n      addToHistory({\n        question,\n        timestamp: new Date().toISOString(),\n        model: response.data.model_used\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error getting answer:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to get answer');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"shadow-sm\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Step 2: Ask a Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Your Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            rows: 2,\n            placeholder: \"Enter your question about the extracted content\",\n            value: question,\n            onChange: handleQuestionChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), Object.keys(availableModels).length > 0 && /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Select QA Model\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n              type: \"radio\",\n              name: \"model-options\",\n              value: selectedModel,\n              onChange: handleModelChange,\n              children: Object.entries(availableModels).map(([key, model]) => /*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: `model-${key}`,\n                value: key,\n                variant: key === 'distilbert' ? 'outline-info' : 'outline-secondary',\n                disabled: !model.available,\n                children: model.name\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-muted\",\n            children: ((_availableModels$sele = availableModels[selectedModel]) === null || _availableModels$sele === void 0 ? void 0 : _availableModels$sele.description) || \"Select a model to use for question answering\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          disabled: !question.trim(),\n          children: \"Get Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionInput, \"RNB7HTsO6N0knOxk4ylHOtRvB3I=\");\n_c = QuestionInput;\nexport default QuestionInput;\nvar _c;\n$RefreshReg$(_c, \"QuestionInput\");","map":{"version":3,"names":["React","useState","useEffect","Form","Button","Card","ToggleButtonGroup","ToggleButton","axios","jsxDEV","_jsxDEV","QuestionInput","question","setQuestion","setAnswer","setLoading","setError","urls","addToHistory","_s","_availableModels$sele","selectedModel","setSelectedModel","availableModels","setAvailableModels","fetchModels","response","get","console","log","data","models","default","Error","error","name","description","available","handleQuestionChange","e","target","value","handleModelChange","val","handleSubmit","preventDefault","trim","setTimeout","post","model_type","answerData","answer","confidence","context","model_used","timestamp","Date","toISOString","model","_error$response","_error$response$data","className","children","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Group","Label","Control","as","rows","placeholder","onChange","Object","keys","length","type","entries","map","key","id","variant","disabled","Text","_c","$RefreshReg$"],"sources":["D:/Projects/WebContentQnA/frontend/src/components/QuestionInput.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Form, Button, Card, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nconst QuestionInput = ({ \r\n  question, \r\n  setQuestion, \r\n  setAnswer, \r\n  setLoading, \r\n  setError,\r\n  urls,\r\n  addToHistory\r\n}) => {\r\n  const [selectedModel, setSelectedModel] = useState('default');\r\n  const [availableModels, setAvailableModels] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Fetch available models when component mounts\r\n    const fetchModels = async () => {\r\n      try {\r\n        // Use appropriate API URL with proper error handling\r\n        const response = await axios.get('http://localhost:5000/api/models');\r\n        console.log(\"Available models response:\", response.data);\r\n        \r\n        if (response.data && response.data.models) {\r\n          setAvailableModels(response.data.models);\r\n          setSelectedModel(response.data.default || 'default');\r\n        } else {\r\n          throw new Error('Invalid response format from models API');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching models:', error);\r\n        // Fallback to default model if API call fails\r\n        setAvailableModels({\r\n          default: {\r\n            name: 'TF-IDF + spaCy',\r\n            description: 'Lightweight model using TF-IDF and spaCy',\r\n            available: true\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    fetchModels();\r\n  }, []);\r\n\r\n  const handleQuestionChange = (e) => {\r\n    setQuestion(e.target.value);\r\n  };\r\n\r\n  const handleModelChange = (val) => {\r\n    console.log(\"Selected model changed to:\", val);\r\n    setSelectedModel(val);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (question.trim() === '') {\r\n      setError('Please enter a question');\r\n      setTimeout(() => setError(''), 3000);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      console.log(\"Submitting question with model:\", selectedModel);\r\n      const response = await axios.post('http://localhost:5000/api/answer', { \r\n        question,\r\n        urls,\r\n        model_type: selectedModel\r\n      });\r\n      \r\n      console.log(\"Answer response:\", response.data);\r\n      \r\n      const answerData = {\r\n        question,\r\n        answer: response.data.answer,\r\n        confidence: response.data.confidence,\r\n        context: response.data.context,\r\n        model_used: response.data.model_used,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      setAnswer(answerData);\r\n      \r\n      // Add to question history\r\n      addToHistory({\r\n        question,\r\n        timestamp: new Date().toISOString(),\r\n        model: response.data.model_used\r\n      });\r\n    } catch (error) {\r\n      console.error('Error getting answer:', error);\r\n      setError(error.response?.data?.error || 'Failed to get answer');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"shadow-sm\">\r\n      <Card.Body>\r\n        <Card.Title>Step 2: Ask a Question</Card.Title>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Your Question</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={2}\r\n              placeholder=\"Enter your question about the extracted content\"\r\n              value={question}\r\n              onChange={handleQuestionChange}\r\n            />\r\n          </Form.Group>\r\n\r\n          {Object.keys(availableModels).length > 0 && (\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Select QA Model</Form.Label>\r\n              <div>\r\n                <ToggleButtonGroup \r\n                  type=\"radio\" \r\n                  name=\"model-options\" \r\n                  value={selectedModel}\r\n                  onChange={handleModelChange}\r\n                >\r\n                  {Object.entries(availableModels).map(([key, model]) => (\r\n                    <ToggleButton\r\n                      key={key}\r\n                      id={`model-${key}`}\r\n                      value={key}\r\n                      variant={key === 'distilbert' ? 'outline-info' : 'outline-secondary'}\r\n                      disabled={!model.available}\r\n                    >\r\n                      {model.name}\r\n                    </ToggleButton>\r\n                  ))}\r\n                </ToggleButtonGroup>\r\n              </div>\r\n              <Form.Text className=\"text-muted\">\r\n                {availableModels[selectedModel]?.description || \"Select a model to use for question answering\"}\r\n              </Form.Text>\r\n            </Form.Group>\r\n          )}\r\n\r\n          <Button variant=\"primary\" type=\"submit\" disabled={!question.trim()}>\r\n            Get Answer\r\n          </Button>\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default QuestionInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}